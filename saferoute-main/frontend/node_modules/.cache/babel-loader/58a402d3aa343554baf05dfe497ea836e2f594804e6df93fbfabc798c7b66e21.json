{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\n// Async thunks for hazard operations\nexport const fetchActiveHazards = createAsyncThunk('hazards/fetchActive', async ({\n  lat,\n  lng,\n  radius = 10\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.get(`/hazards/active?lat=${lat}&lng=${lng}&radius=${radius}`);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch hazards');\n  }\n});\nexport const reportHazard = createAsyncThunk('hazards/report', async (hazardData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.post('/hazards/report', hazardData);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to report hazard');\n  }\n});\nexport const confirmHazard = createAsyncThunk('hazards/confirm', async (hazardId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.post(`/hazards/${hazardId}/confirm`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to confirm hazard');\n  }\n});\nconst initialState = {\n  activeHazards: [],\n  simulatedHazards: [],\n  isLoading: false,\n  isReporting: false,\n  error: null,\n  lastUpdated: null\n};\nconst hazardSlice = createSlice({\n  name: 'hazards',\n  initialState,\n  reducers: {\n    addSimulatedHazard: (state, action) => {\n      state.simulatedHazards.push({\n        ...action.payload,\n        id: Date.now(),\n        isSimulated: true,\n        createdAt: new Date().toISOString()\n      });\n    },\n    removeSimulatedHazard: (state, action) => {\n      state.simulatedHazards = state.simulatedHazards.filter(hazard => hazard.id !== action.payload);\n    },\n    clearSimulatedHazards: state => {\n      state.simulatedHazards = [];\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    updateHazardStatus: (state, action) => {\n      const {\n        hazardId,\n        status\n      } = action.payload;\n      const hazardIndex = state.activeHazards.findIndex(h => h.id === hazardId);\n      if (hazardIndex !== -1) {\n        state.activeHazards[hazardIndex].status = status;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch Active Hazards\n    .addCase(fetchActiveHazards.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchActiveHazards.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.activeHazards = action.payload.hazards;\n      state.lastUpdated = new Date().toISOString();\n    }).addCase(fetchActiveHazards.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    })\n\n    // Report Hazard\n    .addCase(reportHazard.pending, state => {\n      state.isReporting = true;\n      state.error = null;\n    }).addCase(reportHazard.fulfilled, (state, action) => {\n      state.isReporting = false;\n      state.activeHazards.push(action.payload.hazard);\n    }).addCase(reportHazard.rejected, (state, action) => {\n      state.isReporting = false;\n      state.error = action.payload;\n    })\n\n    // Confirm Hazard\n    .addCase(confirmHazard.fulfilled, (state, action) => {\n      const hazardIndex = state.activeHazards.findIndex(h => h.id === action.payload.hazard.id);\n      if (hazardIndex !== -1) {\n        state.activeHazards[hazardIndex] = action.payload.hazard;\n      }\n    });\n  }\n});\nexport const {\n  addSimulatedHazard,\n  removeSimulatedHazard,\n  clearSimulatedHazards,\n  clearError,\n  updateHazardStatus\n} = hazardSlice.actions;\nexport default hazardSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","fetchActiveHazards","lat","lng","radius","rejectWithValue","response","get","data","error","_error$response","_error$response$data","message","reportHazard","hazardData","post","_error$response2","_error$response2$data","confirmHazard","hazardId","_error$response3","_error$response3$data","initialState","activeHazards","simulatedHazards","isLoading","isReporting","lastUpdated","hazardSlice","name","reducers","addSimulatedHazard","state","action","push","payload","id","Date","now","isSimulated","createdAt","toISOString","removeSimulatedHazard","filter","hazard","clearSimulatedHazards","clearError","updateHazardStatus","status","hazardIndex","findIndex","h","extraReducers","builder","addCase","pending","fulfilled","hazards","rejected","actions","reducer"],"sources":["C:/Users/mathew/Downloads/saferoute-main/saferoute-main/frontend/src/store/slices/hazardSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../../services/api';\r\n\r\n// Async thunks for hazard operations\r\nexport const fetchActiveHazards = createAsyncThunk(\r\n  'hazards/fetchActive',\r\n  async ({ lat, lng, radius = 10 }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await api.get(`/hazards/active?lat=${lat}&lng=${lng}&radius=${radius}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.message || 'Failed to fetch hazards');\r\n    }\r\n  }\r\n);\r\n\r\nexport const reportHazard = createAsyncThunk(\r\n  'hazards/report',\r\n  async (hazardData, { rejectWithValue }) => {\r\n    try {\r\n      const response = await api.post('/hazards/report', hazardData);\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.message || 'Failed to report hazard');\r\n    }\r\n  }\r\n);\r\n\r\nexport const confirmHazard = createAsyncThunk(\r\n  'hazards/confirm',\r\n  async (hazardId, { rejectWithValue }) => {\r\n    try {\r\n      const response = await api.post(`/hazards/${hazardId}/confirm`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.message || 'Failed to confirm hazard');\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  activeHazards: [],\r\n  simulatedHazards: [],\r\n  isLoading: false,\r\n  isReporting: false,\r\n  error: null,\r\n  lastUpdated: null\r\n};\r\n\r\nconst hazardSlice = createSlice({\r\n  name: 'hazards',\r\n  initialState,\r\n  reducers: {\r\n    addSimulatedHazard: (state, action) => {\r\n      state.simulatedHazards.push({\r\n        ...action.payload,\r\n        id: Date.now(),\r\n        isSimulated: true,\r\n        createdAt: new Date().toISOString()\r\n      });\r\n    },\r\n    removeSimulatedHazard: (state, action) => {\r\n      state.simulatedHazards = state.simulatedHazards.filter(\r\n        hazard => hazard.id !== action.payload\r\n      );\r\n    },\r\n    clearSimulatedHazards: (state) => {\r\n      state.simulatedHazards = [];\r\n    },\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    updateHazardStatus: (state, action) => {\r\n      const { hazardId, status } = action.payload;\r\n      const hazardIndex = state.activeHazards.findIndex(h => h.id === hazardId);\r\n      if (hazardIndex !== -1) {\r\n        state.activeHazards[hazardIndex].status = status;\r\n      }\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch Active Hazards\r\n      .addCase(fetchActiveHazards.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchActiveHazards.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.activeHazards = action.payload.hazards;\r\n        state.lastUpdated = new Date().toISOString();\r\n      })\r\n      .addCase(fetchActiveHazards.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Report Hazard\r\n      .addCase(reportHazard.pending, (state) => {\r\n        state.isReporting = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(reportHazard.fulfilled, (state, action) => {\r\n        state.isReporting = false;\r\n        state.activeHazards.push(action.payload.hazard);\r\n      })\r\n      .addCase(reportHazard.rejected, (state, action) => {\r\n        state.isReporting = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Confirm Hazard\r\n      .addCase(confirmHazard.fulfilled, (state, action) => {\r\n        const hazardIndex = state.activeHazards.findIndex(\r\n          h => h.id === action.payload.hazard.id\r\n        );\r\n        if (hazardIndex !== -1) {\r\n          state.activeHazards[hazardIndex] = action.payload.hazard;\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  addSimulatedHazard,\r\n  removeSimulatedHazard,\r\n  clearSimulatedHazards,\r\n  clearError,\r\n  updateHazardStatus\r\n} = hazardSlice.actions;\r\n\r\nexport default hazardSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}